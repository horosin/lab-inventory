package com.horosin.inventoryapi.controllers;

import com.horosin.inventoryapi.model.Sample;
import com.horosin.inventoryapi.repository.SampleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
public class SampleController {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private SampleRepository sampleRepository;

    @GetMapping("/hello")
    public String getHelloMessage(){
        return "{\"success\":1}";
    }

    @PostMapping("/samples")
    @ResponseStatus(HttpStatus.CREATED)
    public Sample createNewSample(@RequestBody Sample sample) {

        sampleRepository.save(sample);

        return sample;
    }

    /**
     *
     * @return
     */
    @GetMapping("/samples")
    public Iterable<Sample> getAllSamples() {
        return sampleRepository.findAll();

    }

    /**
     * 
     * @param sampleId
     * @return
     */
    @GetMapping("/samples/{id}")
    public Sample getSample(@PathVariable("id") Integer sampleId) {

        Optional<Sample> sample = sampleRepository.findById(sampleId);

        if(sample.isPresent()) {
            return sample.get();
        }

        throw new IllegalArgumentException();

    }

    @DeleteMapping("/samples/{id}")
    public String removeSample(@PathVariable("id") Integer sampleId) {

        Optional<Sample> sample = sampleRepository.findById(sampleId);

        if(sample.isPresent()) {

            sampleRepository.delete(sample.get());

            return "{\"success\":1}";
        }

        throw new IllegalArgumentException();

    }

    @PostMapping("/samples/{id}")
    public Sample updateSample(
            @PathVariable("id") Integer sampleId,
            @RequestBody Sample newSample
    ) {

        if(!sampleRepository.existsById(sampleId)) {
            throw new IllegalArgumentException();
        }

        newSample.setId(sampleId);
        sampleRepository.save(newSample);

        return newSample;
    }

    // Exception handler for wrong requests
    @ExceptionHandler(IllegalArgumentException.class)
    protected ResponseEntity<Object> handleEntityNotFound(
            Exception ex) {
        String mess = ex.getMessage();
        return new ResponseEntity<>(mess, HttpStatus.BAD_REQUEST);
    }
}
